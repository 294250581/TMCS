<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Users\Administrator\Desktop\TMCS-2015-7-11\Keil\test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Users\Administrator\Desktop\TMCS-2015-7-11\Keil\test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 69]: Last Updated: Sun Jul 12 21:07:17 2015
<BR><P>
<H3>Maximum Stack Usage =        456 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; utStartOS &rArr; ut100msProc &rArr; can_receive_process &rArr; tmcs_sap &rArr; tmcs_bsp_sap &rArr; motor_param_set &rArr; motor_set &rArr; cal_kval_run &rArr; cal_kval_acc &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[54]">CPU_IntDis</a>
 <LI><a href="#[57]">CPU_IntEn</a>
 <LI><a href="#[168]">CPU_SR_Save</a>
 <LI><a href="#[169]">CPU_SR_Restore</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">GPIO_ResetBits</a> from stm32f10x_gpio.o(.text) referenced from iobus.o(.text)
 <LI><a href="#[4a]">GPIO_SetBits</a> from stm32f10x_gpio.o(.text) referenced from iobus.o(.text)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit_ExtMemCtl</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4c]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[46]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[49]">utPtbx</a> from utprt.o(.text) referenced from utmcu.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[162]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[15d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[163]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[164]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[165]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[166]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[167]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[47]"></a>SystemInit_ExtMemCtl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>xxxx</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = main &rArr; utStartOS &rArr; ut100msProc &rArr; can_receive_process &rArr; tmcs_sap &rArr; tmcs_bsp_sap &rArr; motor_param_set &rArr; motor_set &rArr; cal_kval_run &rArr; cal_kval_acc &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utStartOS
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitSys
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitInt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utDelay1s
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init_set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_reload
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Reset_And_Standby
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Peripherals_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Interrupt_Channel_Config
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_baudrate
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Clean
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectCal
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntEn
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; utOsalTimerUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utOsalTimerUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; can_ISR &rArr; CAN_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI0_IRQHandler &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI1_IRQHandler &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI2_IRQHandler &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI3_IRQHandler &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI4_IRQHandler &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI9_5_IRQHandler &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>utDelay1us</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, utmcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utDelay1ms
</UL>

<P><STRONG><a name="[6b]"></a>utDelay1ms</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, utmcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = utDelay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utDelay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utTestPrt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrtwrg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_point_test
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utDelay1s
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Reset_And_Standby
</UL>

<P><STRONG><a name="[63]"></a>utDelay1s</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, utmcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = utDelay1s &rArr; utDelay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utDelay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>utInitLamp</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, utmcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = utInitLamp &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
</UL>

<P><STRONG><a name="[6e]"></a>utInitCpuClk</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, utmcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = utInitCpuClk &rArr; utInitLamp &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitLamp
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitSys
</UL>

<P><STRONG><a name="[7f]"></a>utInitPrt</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, utmcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = utInitPrt &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitSys
</UL>

<P><STRONG><a name="[83]"></a>utInitOsalClk</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, utmcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utInitOsalClk
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitSys
</UL>

<P><STRONG><a name="[85]"></a>utInitWatchDog</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, utmcu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>

<P><STRONG><a name="[54]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utGetData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utStoreData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utClrFlag
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utSetFlag
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utClrOutputEvt
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utSetOutputEvt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utClrInputEvt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utSetInputEvt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtbx
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utOsalTimerUpdate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utGetData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utStoreData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utClrFlag
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utSetFlag
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utClrOutputEvt
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utSetOutputEvt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utClrInputEvt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utSetInputEvt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtbx
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utOsalTimerUpdate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>utOsalTimerUpdate</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, utosal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = utOsalTimerUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntEn
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[56]"></a>utInitSys</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utosal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = utInitSys &rArr; utInitDebug &rArr; USART1_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitDebug
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitOsalClk
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitPrt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>utStartOS</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, utosal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = utStartOS &rArr; ut100msProc &rArr; can_receive_process &rArr; tmcs_sap &rArr; tmcs_bsp_sap &rArr; motor_param_set &rArr; motor_set &rArr; cal_kval_run &rArr; cal_kval_acc &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utOutputProc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInputProc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ut1sProc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ut1msProc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ut10msProc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ut100msProc
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>utSetInputEvt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, utosal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntEn
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>

<P><STRONG><a name="[93]"></a>utClrInputEvt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, utosal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntEn
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>

<P><STRONG><a name="[16a]"></a>utIsInputEvt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utosal.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>utSetOutputEvt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, utosal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntEn
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>

<P><STRONG><a name="[95]"></a>utClrOutputEvt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, utosal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntEn
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>

<P><STRONG><a name="[16b]"></a>utIsOutputEvt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utosal.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>utSetFlag</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, utosal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntEn
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>

<P><STRONG><a name="[97]"></a>utClrFlag</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, utosal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntEn
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>

<P><STRONG><a name="[16c]"></a>utIsFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utosal.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>utSleep</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, utosal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = utSleep &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtn
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsn
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsc
</UL>

<P><STRONG><a name="[9b]"></a>inituartIO</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, utboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inituartIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitDebug
</UL>

<P><STRONG><a name="[9c]"></a>USART1_Config</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, utboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART1_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitDebug
</UL>

<P><STRONG><a name="[8b]"></a>utInitDebug</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, utboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = utInitDebug &rArr; USART1_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inituartIO
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitSys
</UL>

<P><STRONG><a name="[a0]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, utboard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>

<P><STRONG><a name="[a3]"></a>utInitUart3</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, utboard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[aa]"></a>utInitIO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utboard.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitBoard
</UL>

<P><STRONG><a name="[55]"></a>utInitInt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, utboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utInitInt
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>utInitBoard</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, utboard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitVariable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitIO
</UL>

<P><STRONG><a name="[16d]"></a>utPtb1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uttest.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>utPtb3</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uttest.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>test</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uttest.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitBoard
</UL>

<P><STRONG><a name="[ac]"></a>multi_point_test</STRONG> (Thumb, 640 bytes, Stack size 24 bytes, utevtproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = multi_point_test &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampler_get_motor_state
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Move
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Go_To
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtn
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utDelay1ms
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ut10msProc
</UL>

<P><STRONG><a name="[a9]"></a>utInitVariable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utevtproc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitBoard
</UL>

<P><STRONG><a name="[8c]"></a>ut1msProc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utevtproc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utStartOS
</UL>

<P><STRONG><a name="[8d]"></a>ut10msProc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, utevtproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ut10msProc &rArr; multi_point_test &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsn
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_point_test
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utStartOS
</UL>

<P><STRONG><a name="[8e]"></a>ut100msProc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, utevtproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ut100msProc &rArr; can_receive_process &rArr; tmcs_sap &rArr; tmcs_bsp_sap &rArr; motor_param_set &rArr; motor_set &rArr; cal_kval_run &rArr; cal_kval_acc &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utStartOS
</UL>

<P><STRONG><a name="[8f]"></a>ut1sProc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, utevtproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ut1sProc &rArr; ENC_Deal &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Get_Param
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Deal
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtn
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utStartOS
</UL>

<P><STRONG><a name="[90]"></a>utInputProc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utevtproc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utStartOS
</UL>

<P><STRONG><a name="[91]"></a>utOutputProc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utevtproc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utStartOS
</UL>

<P><STRONG><a name="[49]"></a>utPtbx</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, utprt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = utPtbx
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntEn
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utCalClk10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utmcu.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>utPtb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utprt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utPtb
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>

<P><STRONG><a name="[b8]"></a>utPtc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, utprt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utPtc
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtn
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>

<P><STRONG><a name="[16f]"></a>utPts</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, utprt.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>utPtn</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, utprt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = utPtn &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtc
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_mvp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_gcos
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_gco
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_erro_info
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utTestPrt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsn
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_point_test
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ut1sProc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utSleep
</UL>

<P><STRONG><a name="[5f]"></a>utPrt</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, utprt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtb
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2cha
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utStoreData
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_sap
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rel
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_abs
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_set_tcbn
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_stcos
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_stco
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_stap
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_sioi
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_sio
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_scos
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_sco
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_sap
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_ror
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_rol
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_rfs
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_mvp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_msp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_gio
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_gcos
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_gco
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrtwrg
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsn
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Deal
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_point_test
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utSleep
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_reload
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Clean
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>utPrtwrg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, utprt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utDelay1ms
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>

<P><STRONG><a name="[170]"></a>utCalClk1</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, utprt.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>utCalClk10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, utprt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtbx
</UL>

<P><STRONG><a name="[bd]"></a>utTestPrt</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, utprt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtn
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utDelay1ms
</UL>

<P><STRONG><a name="[5e]"></a>ENC_Init</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, encoder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ENC_Init &rArr; TIM_ICInit &rArr; TI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICStructInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EncoderInterfaceConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>ENC_Deal</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, encoder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ENC_Deal &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ut1sProc
</UL>

<P><STRONG><a name="[64]"></a>ENC_Clean</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, encoder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ENC_Clean &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsn
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>dSPIN_Peripherals_Init</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dSPIN_Peripherals_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>dSPIN_Reset_And_Standby</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dSPIN_Reset_And_Standby &rArr; utDelay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utDelay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>dSPIN_Interrupt_Channel_Config</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dSPIN_Interrupt_Channel_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>dSPIN_Regs_Struct_Reset</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, dspin.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_param_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init_set
</UL>

<P><STRONG><a name="[c7]"></a>dSPIN_Write_Byte</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Get_Status
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Hard_HiZ
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Soft_HiZ
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Hard_Stop
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Soft_Stop
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Reset_Device
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Reset_Pos
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Go_Mark
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Go_Home
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Release_SW
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Go_Until
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Go_To_Dir
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Step_Clock
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Run
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Nop
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Set_Param
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Move
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Go_To
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Get_Param
</UL>

<P><STRONG><a name="[cb]"></a>dSPIN_Set_Param</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dSPIN_Set_Param &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_param_set
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Registers_Set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init_set
</UL>

<P><STRONG><a name="[cc]"></a>dSPIN_Registers_Set</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dSPIN_Registers_Set &rArr; dSPIN_Set_Param &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Set_Param
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_param_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init_set
</UL>

<P><STRONG><a name="[cd]"></a>dSPIN_Nop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dspin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>

<P><STRONG><a name="[b7]"></a>dSPIN_Get_Param</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dSPIN_Get_Param &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsn
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampler_get_motor_state
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ut1sProc
</UL>

<P><STRONG><a name="[ce]"></a>dSPIN_Run</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dSPIN_Run &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_ror
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rol
</UL>

<P><STRONG><a name="[cf]"></a>dSPIN_Step_Clock</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dspin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>

<P><STRONG><a name="[b2]"></a>dSPIN_Move</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dSPIN_Move &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rel
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_point_test
</UL>

<P><STRONG><a name="[ad]"></a>dSPIN_Go_To</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dSPIN_Go_To &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_abs
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_point_test
</UL>

<P><STRONG><a name="[d0]"></a>dSPIN_Go_To_Dir</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dspin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>

<P><STRONG><a name="[d1]"></a>dSPIN_Go_Until</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dSPIN_Go_Until &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsn
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsc
</UL>

<P><STRONG><a name="[d2]"></a>dSPIN_Release_SW</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dSPIN_Release_SW &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsc
</UL>

<P><STRONG><a name="[d3]"></a>dSPIN_Go_Home</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dspin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>

<P><STRONG><a name="[d4]"></a>dSPIN_Go_Mark</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dspin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>

<P><STRONG><a name="[d5]"></a>dSPIN_Reset_Pos</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dSPIN_Reset_Pos &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsn
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsc
</UL>

<P><STRONG><a name="[d6]"></a>dSPIN_Reset_Device</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dspin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>

<P><STRONG><a name="[d7]"></a>dSPIN_Soft_Stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dSPIN_Soft_Stop &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_msp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init_set
</UL>

<P><STRONG><a name="[d8]"></a>dSPIN_Hard_Stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dSPIN_Hard_Stop &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_msp
</UL>

<P><STRONG><a name="[d9]"></a>dSPIN_Soft_HiZ</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dSPIN_Soft_HiZ &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_msp
</UL>

<P><STRONG><a name="[da]"></a>dSPIN_Hard_HiZ</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dSPIN_Hard_HiZ &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_msp
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_param_set
</UL>

<P><STRONG><a name="[db]"></a>dSPIN_Get_Status</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dspin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dSPIN_Get_Status &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_erro_info
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_param_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Busy_SW
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init_set
</UL>

<P><STRONG><a name="[dc]"></a>dSPIN_Busy_HW</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dspin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[de]"></a>dSPIN_Busy_SW</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dspin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Get_Status
</UL>

<P><STRONG><a name="[df]"></a>dSPIN_Flag</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dspin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[5d]"></a>motor_init_set</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = motor_init_set &rArr; motor_set &rArr; cal_kval_run &rArr; cal_kval_acc &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Get_Status
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Soft_Stop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Registers_Set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Set_Param
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Regs_Struct_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>motor_param_set</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = motor_param_set &rArr; motor_set &rArr; cal_kval_run &rArr; cal_kval_acc &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Get_Status
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Hard_HiZ
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Registers_Set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Set_Param
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Regs_Struct_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_sap
</UL>

<P><STRONG><a name="[e3]"></a>motor_erro_info</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, motor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Get_Status
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtn
</UL>

<P><STRONG><a name="[ae]"></a>sampler_get_motor_state</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sampler_get_motor_state &rArr; dSPIN_Get_Param &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Get_Param
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsn
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_point_test
</UL>

<P><STRONG><a name="[e4]"></a>cal_kval_hold</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, motor_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = cal_kval_hold &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
</UL>

<P><STRONG><a name="[ea]"></a>cal_kval_acc</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, motor_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cal_kval_acc &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_run
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
</UL>

<P><STRONG><a name="[ec]"></a>cal_kval_dec</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, motor_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cal_kval_dec &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
</UL>

<P><STRONG><a name="[ed]"></a>cal_st_slp</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, motor_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = cal_st_slp &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
</UL>

<P><STRONG><a name="[ee]"></a>cal_int_speed</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, motor_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cal_int_speed &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
</UL>

<P><STRONG><a name="[ef]"></a>cal_fn_slp_acc</STRONG> (Thumb, 180 bytes, Stack size 128 bytes, motor_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = cal_fn_slp_acc &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
</UL>

<P><STRONG><a name="[f0]"></a>cal_fn_slp_dec</STRONG> (Thumb, 180 bytes, Stack size 128 bytes, motor_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = cal_fn_slp_dec &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
</UL>

<P><STRONG><a name="[f1]"></a>cal_kval_run</STRONG> (Thumb, 694 bytes, Stack size 144 bytes, motor_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = cal_kval_run &rArr; cal_kval_acc &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_acc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
</UL>

<P><STRONG><a name="[e1]"></a>motor_set</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, motor_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = motor_set &rArr; cal_kval_run &rArr; cal_kval_acc &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_run
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_fn_slp_dec
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_fn_slp_acc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_int_speed
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_st_slp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_dec
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_acc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_hold
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_param_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init_set
</UL>

<P><STRONG><a name="[f8]"></a>SendCanMsg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, can_network.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>

<P><STRONG><a name="[58]"></a>can_Init</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, can_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = can_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>can_set_baudrate</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, can_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = can_set_baudrate &rArr; CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>can_ISR</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, can_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = can_ISR &rArr; CAN_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>can_sumcheck</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, can_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_sumcheck
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[b5]"></a>can_receive_process</STRONG> (Thumb, 736 bytes, Stack size 8 bytes, can_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = can_receive_process &rArr; tmcs_sap &rArr; tmcs_bsp_sap &rArr; motor_param_set &rArr; motor_set &rArr; cal_kval_run &rArr; cal_kval_acc &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_stgp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_stcos
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_stco
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_stap
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_sioi
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_sio
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_scos
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_sco
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_sap
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_ror
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_rol
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_rfs
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_mvp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_msp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_gio
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_gcos
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_gco
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_sumcheck
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntEn
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ut100msProc
</UL>

<P><STRONG><a name="[103]"></a>tmcs_ror</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tmcs_ror &rArr; tmcs_bsp_ror &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_ror
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[104]"></a>tmcs_rol</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tmcs_rol &rArr; tmcs_bsp_rol &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rol
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[105]"></a>tmcs_msp</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tmcs_msp &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_msp
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[106]"></a>tmcs_mvp</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tmcs_mvp &rArr; tmcs_bsp_rel &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rel
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_abs
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtn
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[107]"></a>tmcs_sap</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = tmcs_sap &rArr; tmcs_bsp_sap &rArr; motor_param_set &rArr; motor_set &rArr; cal_kval_run &rArr; cal_kval_acc &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_sap
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[108]"></a>tmcs_stap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tmcs_stap &rArr; save_value &rArr; utStoreData &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_value
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[109]"></a>tmcs_stgp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tmcs_stgp &rArr; save_value &rArr; utStoreData &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_value
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[10e]"></a>tmcs_sco</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tmcs_sco &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[10f]"></a>tmcs_gco</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tmcs_gco &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtn
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[110]"></a>tmcs_scos</STRONG> (Thumb, 684 bytes, Stack size 24 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tmcs_scos &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[111]"></a>tmcs_gcos</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tmcs_gcos &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtn
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[112]"></a>tmcs_stco</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tmcs_stco &rArr; save_value &rArr; utStoreData &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_value
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[113]"></a>tmcs_stcos</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tmcs_stcos &rArr; save_value &rArr; utStoreData &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_value
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[10b]"></a>tmcs_sio</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tmcs_sio &rArr; iobus_set_mode &rArr; iobus_set_tcbn &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_set_output
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_set_mode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[10d]"></a>tmcs_gio</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tmcs_gio &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_get_ioinput
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[10c]"></a>tmcs_sioi</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tmcs_sioi &rArr; iobus_set_nvic &rArr; iobus_set_tcbn &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_set_tcbn
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_set_nvic
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[10a]"></a>tmcs_rfs</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tmcs_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tmcs_rfs &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
</UL>

<P><STRONG><a name="[120]"></a>utStoreData</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = utStoreData &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntEn
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_value
</UL>

<P><STRONG><a name="[125]"></a>utGetData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = utGetData
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntEn
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectCal
</UL>

<P><STRONG><a name="[126]"></a>utIsStored</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectCal
</UL>

<P><STRONG><a name="[61]"></a>DetectCal</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = DetectCal &rArr; utGetData
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utIsStored
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utGetData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>save_value</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = save_value &rArr; utStoreData &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utStoreData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_stgp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_stcos
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_stco
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_stap
</UL>

<P><STRONG><a name="[114]"></a>tmcs_bsp_ror</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, tmcs_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tmcs_bsp_ror &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Run
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_ror
</UL>

<P><STRONG><a name="[115]"></a>tmcs_bsp_rol</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, tmcs_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tmcs_bsp_rol &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Run
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_rol
</UL>

<P><STRONG><a name="[116]"></a>tmcs_bsp_msp</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tmcs_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tmcs_bsp_msp &rArr; dSPIN_Hard_HiZ &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Hard_HiZ
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Soft_HiZ
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Hard_Stop
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Soft_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_msp
</UL>

<P><STRONG><a name="[119]"></a>tmcs_bsp_sap</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, tmcs_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tmcs_bsp_sap &rArr; motor_param_set &rArr; motor_set &rArr; cal_kval_run &rArr; cal_kval_acc &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_param_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_sap
</UL>

<P><STRONG><a name="[117]"></a>tmcs_bsp_abs</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tmcs_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tmcs_bsp_abs &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Go_To
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_mvp
</UL>

<P><STRONG><a name="[118]"></a>tmcs_bsp_rel</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, tmcs_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tmcs_bsp_rel &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Move
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_mvp
</UL>

<P><STRONG><a name="[b3]"></a>tmcs_bsp_rfsn</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, tmcs_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tmcs_bsp_rfsn &rArr; sampler_get_motor_state &rArr; dSPIN_Get_Param &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Reset_Pos
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Go_Until
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampler_get_motor_state
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Get_Param
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtn
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utSleep
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Clean
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ut10msProc
</UL>

<P><STRONG><a name="[b4]"></a>tmcs_bsp_rfsc</STRONG> (Thumb, 836 bytes, Stack size 8 bytes, tmcs_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tmcs_bsp_rfsc &rArr; sampler_get_motor_state &rArr; dSPIN_Get_Param &rArr; dSPIN_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Reset_Pos
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Release_SW
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Go_Until
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampler_get_motor_state
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Get_Param
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPtn
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utSleep
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Clean
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ut10msProc
</UL>

<P><STRONG><a name="[12b]"></a>iobus_tcb_init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, iobus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_init
</UL>

<P><STRONG><a name="[128]"></a>iobus_en_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, iobus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iobus_en_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_init
</UL>

<P><STRONG><a name="[129]"></a>iobus_sub_init</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, iobus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iobus_sub_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_init
</UL>

<P><STRONG><a name="[12a]"></a>iobus_nvic_init</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, iobus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iobus_nvic_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_init
</UL>

<P><STRONG><a name="[59]"></a>iobus_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iobus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iobus_init &rArr; iobus_nvic_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_nvic_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_sub_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_en_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_tcb_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>iobus_mode</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, iobus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iobus_mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_set_mode
</UL>

<P><STRONG><a name="[11f]"></a>iobus_set_tcbn</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, iobus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iobus_set_tcbn &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_set_nvic
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_set_mode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_sioi
</UL>

<P><STRONG><a name="[11b]"></a>iobus_set_mode</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, iobus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = iobus_set_mode &rArr; iobus_set_tcbn &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_set_tcbn
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_sio
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_reload
</UL>

<P><STRONG><a name="[11c]"></a>iobus_set_output</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, iobus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iobus_set_output
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_sio
</UL>

<P><STRONG><a name="[11d]"></a>iobus_get_ioinput</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, iobus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iobus_get_ioinput
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_gio
</UL>

<P><STRONG><a name="[12d]"></a>iobus_get_businput</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, iobus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[11e]"></a>iobus_set_nvic</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, iobus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = iobus_set_nvic &rArr; iobus_set_tcbn &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_set_tcbn
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_sioi
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_reload
</UL>

<P><STRONG><a name="[62]"></a>iobus_reload</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, iobus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = iobus_reload &rArr; iobus_set_nvic &rArr; iobus_set_tcbn &rArr; utPrt &rArr; utPtc
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_set_nvic
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_set_mode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitInt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[53]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_set_nvic
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Interrupt_Channel_Config
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xxxx
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_nvic_init
</UL>

<P><STRONG><a name="[a6]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitInt
</UL>

<P><STRONG><a name="[171]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitOsalClk
</UL>

<P><STRONG><a name="[fb]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f10x_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[fd]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f10x_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_baudrate
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[fe]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f10x_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[fc]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[172]"></a>CAN_SlaveStartBank</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
</UL>

<P><STRONG><a name="[f9]"></a>CAN_Transmit</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, stm32f10x_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCanMsg
</UL>

<P><STRONG><a name="[173]"></a>CAN_TransmitStatus</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>CAN_CancelTransmit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>CAN_FIFORelease</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>

<P><STRONG><a name="[175]"></a>CAN_MessagePending</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>CAN_Receive</STRONG> (Thumb, 234 bytes, Stack size 12 bytes, stm32f10x_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FIFORelease
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_ISR
</UL>

<P><STRONG><a name="[176]"></a>CAN_DBGFreeze</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>CAN_Sleep</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>CAN_WakeUp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>CAN_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>CAN_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>CAN_GetITStatus</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, stm32f10x_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>

<P><STRONG><a name="[17b]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_set_nvic
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Interrupt_Channel_Config
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xxxx
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_nvic_init
</UL>

<P><STRONG><a name="[17d]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[17f]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
</UL>

<P><STRONG><a name="[180]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
</UL>

<P><STRONG><a name="[121]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utStoreData
</UL>

<P><STRONG><a name="[181]"></a>FLASH_UnlockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>FLASH_LockBank1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[132]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
</UL>

<P><STRONG><a name="[123]"></a>FLASH_ErasePage</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utStoreData
</UL>

<P><STRONG><a name="[134]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[135]"></a>FLASH_WaitForLastBank1Operation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank1Pages
</UL>

<P><STRONG><a name="[136]"></a>FLASH_EraseAllBank1Pages</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[138]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
</UL>

<P><STRONG><a name="[137]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionStatus
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[124]"></a>FLASH_ProgramWord</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utStoreData
</UL>

<P><STRONG><a name="[139]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[13a]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[13b]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 202 bytes, Stack size 28 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[13c]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[13d]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[184]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utStoreData
</UL>

<P><STRONG><a name="[189]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[140]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[50]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitUart3
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inituartIO
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitPrt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitLamp
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Peripherals_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xxxx
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_mode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_sub_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_en_init
</UL>

<P><STRONG><a name="[18a]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_get_ioinput
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Flag
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Busy_HW
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_get_businput
</UL>

<P><STRONG><a name="[18b]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_set_mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitPrt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Reset_And_Standby
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Peripherals_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_en_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iobus.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_set_mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Reset_And_Standby
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iobus.o(.text)
</UL>
<P><STRONG><a name="[18e]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_sub_init
</UL>

<P><STRONG><a name="[51]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Interrupt_Channel_Config
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xxxx
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_nvic_init
</UL>

<P><STRONG><a name="[193]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitWatchDog
</UL>

<P><STRONG><a name="[87]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitWatchDog
</UL>

<P><STRONG><a name="[88]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitWatchDog
</UL>

<P><STRONG><a name="[89]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitWatchDog
</UL>

<P><STRONG><a name="[8a]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitWatchDog
</UL>

<P><STRONG><a name="[194]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
</UL>

<P><STRONG><a name="[70]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
</UL>

<P><STRONG><a name="[7a]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
</UL>

<P><STRONG><a name="[71]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
</UL>

<P><STRONG><a name="[195]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
</UL>

<P><STRONG><a name="[79]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
</UL>

<P><STRONG><a name="[7b]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
</UL>

<P><STRONG><a name="[7c]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
</UL>

<P><STRONG><a name="[74]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
</UL>

<P><STRONG><a name="[76]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
</UL>

<P><STRONG><a name="[75]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
</UL>

<P><STRONG><a name="[197]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
</UL>

<P><STRONG><a name="[199]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[19d]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inituartIO
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Peripherals_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_sub_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iobus_en_init
</UL>

<P><STRONG><a name="[7e]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitCpuClk
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
</UL>

<P><STRONG><a name="[13f]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[12e]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[19e]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[c6]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Peripherals_Init
</UL>

<P><STRONG><a name="[142]"></a>I2S_Init</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[1a4]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Peripherals_Init
</UL>

<P><STRONG><a name="[1a6]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>

<P><STRONG><a name="[ca]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>

<P><STRONG><a name="[1a9]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSPIN_Write_Byte
</UL>

<P><STRONG><a name="[1b1]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
</UL>

<P><STRONG><a name="[80]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitPrt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
</UL>

<P><STRONG><a name="[1b4]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>TIM_OC4Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[149]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[147]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[145]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[c2]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_ICInit &rArr; TI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
</UL>

<P><STRONG><a name="[14c]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[1b8]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
</UL>

<P><STRONG><a name="[1b9]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
</UL>

<P><STRONG><a name="[1ba]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitPrt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
</UL>

<P><STRONG><a name="[1bb]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
</UL>

<P><STRONG><a name="[1bc]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[14d]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[14f]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[151]"></a>TIM_ETRConfig</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[150]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[152]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[1c0]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_EncoderInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
</UL>

<P><STRONG><a name="[1c2]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitPrt
</UL>

<P><STRONG><a name="[1c6]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
</UL>

<P><STRONG><a name="[1f4]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[9d]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitUart3
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[1f6]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitUart3
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[a5]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitUart3
</UL>

<P><STRONG><a name="[1f9]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1ff]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[9e]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[20a]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utInitUart3
</UL>

<P><STRONG><a name="[20b]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_value
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_process
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectCal
</UL>

<P><STRONG><a name="[20c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_run
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_run
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_fmul</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_run
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_int_speed
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_st_slp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_dec
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_acc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_hold
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_sap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_run
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_st_slp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_hold
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_ror
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rol
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_run
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_fn_slp_dec
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_fn_slp_acc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_int_speed
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_st_slp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_dec
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_acc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_hold
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_ror
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rol
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_run
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_fn_slp_dec
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_fn_slp_acc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_int_speed
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_dec
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_acc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_point_test
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_run
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_fn_slp_dec
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_fn_slp_acc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_int_speed
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_dec
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_acc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_sap
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_ror
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rol
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_point_test
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_ror
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rol
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_run
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_fn_slp_dec
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_fn_slp_acc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_int_speed
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_st_slp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_dec
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_acc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_hold
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_point_test
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_run
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_fn_slp_dec
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_fn_slp_acc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_int_speed
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_st_slp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_dec
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_acc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_hold
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_run
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_run
</UL>

<P><STRONG><a name="[20d]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[20f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[210]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[211]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[154]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[15a]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[159]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[213]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>__0sprintf$1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[216]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[99]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_mvp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_gcos
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_gco
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsn
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmcs_bsp_rfsc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ut1sProc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utSleep
</UL>

<P><STRONG><a name="[217]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[218]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[219]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[e9]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_run
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_fn_slp_dec
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_fn_slp_acc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_int_speed
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_st_slp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_dec
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_acc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_kval_hold
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ba]"></a>hex2cha</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, utprt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utPrt
</UL>

<P><STRONG><a name="[131]"></a>CheckITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[14a]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[148]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[146]"></a>TI2_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[144]"></a>TI1_Config</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[15f]"></a>_printf_core</STRONG> (Thumb, 334 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[4c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
